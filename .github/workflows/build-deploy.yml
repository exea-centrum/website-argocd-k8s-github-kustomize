name: Build and Push Docker Image

on:
  push:
    branches: [main]

env:
  IMAGE_NAME: website-simple-argocd-k8s-github-kustomize

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write # Ensures GITHUB_TOKEN has write access

steps:
  - name: Checkout
    uses: actions/checkout@v4

  # --- KLUCZOWA POPRAWKA DLA CACHE ---
  # Ten krok konfiguruje Buildx z kompatybilnym sterownikiem (docker-container),
  # co jest wymagane do użycia cache'owania typu 'gha' (zapobiega błędowi "Cache export is not supported").
  - name: Set up Docker Buildx
    uses: docker/setup-buildx-action@v3

  - name: List build context # Debug: Verify files
    run: ls -la

  - name: Login to GHCR
    uses: docker/login-action@v3
    with:
      registry: ghcr.io
      username: ${{ github.actor }}
      password: ${{ secrets.GITHUB_TOKEN }}

  - name: Build and push
    uses: docker/build-push-action@v6
    with:
      context: .
      push: true
      tags: |
        ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
      # Cache będzie teraz działać dzięki Buildx
      cache-from: type=gha
      cache-to: type=gha,mode=max

  - name: Update Kustomization
    run: |
      cd manifests/production
      # Zastąpienie wartości newTag aktualnym SHA commita
      sed -i "s|newTag:.*|newTag: ${{ github.sha }}|g" kustomization.yaml

  - name: Commit changes
    run: |
      git config --local user.email "action@github.com"
      git config --local user.name "GitHub Action"
      git add manifests/production/kustomization.yaml
      git commit -m "Update image to ${{ github.sha }}" || echo "No changes"
      git push

  # Krok końcowy: Potwierdzenie pomyślnego zakończenia i wyświetlenie tagu obrazu
  - name: Potwierdzenie Zakończenia
    run: |
      echo "✅ Workflow zakończony pomyślnie."
      echo "Nowy obraz: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
